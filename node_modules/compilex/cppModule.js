var exec  = require('child_process').exec;
var fs = require('fs');
var cuid = require('cuid');
var colors = require('colors');


exports.stats = false ;


exports.compileCPP = function ( envData ,  code , fn ) { 
			//creating source file
	        var filename = cuid.slug();
			path = './temp/';
			 			 

			//create temp0 
 			fs.writeFile( path  +  filename +'.cpp' , code  , function(err ){			
				if(exports.stats)
				{
					if(err)
					console.log('ERROR: '.red + err);
				    else
				    console.log('INFO: '.green + filename +'.cpp created');	
					
				}
			});

 			//compiling and exrcuiting source code
	       if(envData.OS === 'windows' || envData.cmd === 'g++')
	       {

			//compile c code 
			commmand = 'g++ ' + path + filename +'.cpp -o '+path + filename +'.exe' ;
			console.log(commmand);
			exec(commmand , function ( error , stdout , stderr ){  
				if(error)
				{
					if(exports.stats)
					{
						console.log('INFO: '.green + filename + '.cpp contained an error while compiling');
					}
					var out = { error : stderr };
					fn(out);
				}
				else
				{
				    var tempcommand = "cd temp & "+ filename ;
					exec( tempcommand , function ( error , stdout , stderr ){
						if(error)
						{
						
						if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
							{
								var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
								fn(out);								
							}
						else
							{
								if(exports.stats)
								{
									console.log('INFO: '.green + filename + '.cpp contained an error while executing');
								}

								var out = { error : stderr };
								fn(out);								
							}													
						}
						else
						{
							if(exports.stats)
							{
								console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
							}
							var out = { output : stdout};
							fn(out);
						}
		    		});
				}			

			});


	       }  
	       else 
	       {
			//compile c code 
			commmand = 'gcc ' + path + filename +'.cpp -o '+ path + filename+'.out' ;
			exec(commmand , function ( error , stdout , stderr ){  
				if(error)
				{
					if(exports.stats)
					{
						console.log('INFO: '.green + filename + '.cpp contained an error while compiling');
					}
					var out = { error : stderr};
					fn(out);
				}
				else
				{
					exec( path + filename + '.out', function ( error , stdout , stderr ){
						if(error)
						{
						if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
							{
								var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
								fn(out);
							}
						else
							{
								if(exports.stats)
									{
										console.log('INFO: '.green + filename + '.cpp contained an error while executing');
									}
								var out = { error : stderr };
								fn(out);
							}													
						}
						else
						{
							if(exports.stats)
							{
								console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
							}
							var out = { output : stdout};
							fn(out);
						}
		    		});

				}			
			});
	       }	    								
} //end of compileCPP

exports.compileCPPWithInput = function ( envData , code , input ,  fn ) { 
	var filename = cuid.slug();
	path = './temp/';
	 			 
	//create temp0 
 	fs.writeFile( path  +  filename +'.cpp' , code  , function(err ){
 		if(exports.stats)
	    {
			if(err)
			console.log('ERROR: '.red + err);
	    	else
	    	console.log('INFO: '.green + filename +'.cpp created');
		} 
	});

	if(envData.OS === 'windows' || envData.cmd ==='g++')
	    {	    	    

			//compile c code 
			commmand = 'g++ ' + path + filename +'.cpp -o '+ path + filename+'.exe' ;
			exec(commmand , function ( error , stdout , stderr ){  
				if(error)
				{
					if(exports.stats)
					{
						console.log('INFO: '.green + filename + '.cpp contained an error while compiling');
					}
					var out = { error : stderr };
					fn(out);
				}
				else
				{
					if(input){
						var inputfile = filename + 'input.txt';

						fs.writeFile( path  +  inputfile , input  , function(err ){
							if(exports.stats)
							{
								if(err)
									console.log('ERROR: '.red + err);
			    				else
			    					console.log('INFO: '.green + inputfile +' (inputfile) created');
			    			}
			            });
			            var tempcommand = "cd temp & " + filename ;

						exec( tempcommand + '<' + inputfile , function( error , stdout , stderr ){
						if(error)
						{
						if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
							{
								var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.'};
								fn(out);
							}
						else
							{
								if(exports.stats)
									{
										console.log('INFO: '.green + filename + '.cpp contained an error while executing');
									}
								var out = { error : stderr};
								fn(out);
							}																				
						}
						else
						{
							if(exports.stats)
							{
								console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
							}
							var out = { output : stdout};
							fn(out);
						}
						});

					}
					else //input not provided 
					{
						if(exports.stats)
						{
							console.log('INFO: '.green + 'Input mission for '+filename +'.cpp');
						}
					    var out = { error : 'Input Missing' };
						fn(out);
					}
					
				}
			

			});
	    								
	    }
	else	    	
	    {
	    				//compile c code 
			commmand = 'gcc ' + path + filename +'.cpp -o '+ path + filename+'.out' ;
			exec(commmand , function ( error , stdout , stderr ){  
				if(error)
				{
					if(exports.stats)
					{
						console.log('INFO: '.green + filename + '.cpp contained an error while compiling');
					}
					var out = { error : stderr};
					fn(out);
				}
				else
				{
					if(input){
						var inputfile = filename + 'input.txt';

						fs.writeFile( path  +  inputfile , input  , function(err ){
							if(exports.stats)
							{
								if(err)
									console.log('ERROR: '.red + err);
			    				else
			    					console.log('INFO: '.green + inputfile +' (inputfile) created');
			    			}
			            });

						exec( path + filename +'.out' + ' < ' + path + inputfile , function( error , stdout , stderr ){
						if(error)
						{

						if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
							{
								var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.'};
								fn(out);
							}
						else
							{
								if(exports.stats)
								{
									console.log('INFO: '.green + filename + '.cpp contained an error while executing');
								}
								var out =  { output : stderr};
								fn(out);
							}																				
						}
						else
						{
							if(exports.stats)
							{
								console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
							}
							var out = { output : stdout};
							fn(out);
						}
						});

					}
					else //no input file
					{
						if(exports.stats)
						{
							console.log('INFO: '.green + 'Input mission for '+filename +'.cpp');
						}
					    var out = { error : 'Input Missing' };
						fn(out);
					}
					
				}
				
	
			});


	    }								
} //end of compileCPPWithInput

exports.compileMultiFileCPPWithInput = function ( envData , code , input ,  fn ) { 
	var com = [];
	var commandCPP = 'g++ ';
	var commandC = 'gcc ';
	path = './temp/';
	code.forEach(function(key) {
		fs.readFile(key.path, 'utf8',function(err, keyfileData) {
			var filename = cuid.slug();
			console.log(keyfileData);
			fs.writeFile( path  +  key.originalFilename , keyfileData  , function(err ){
		 		if(exports.stats)
			    {
					if(err)
					console.log('ERROR: '.red + err);
					else{
						console.log('INFO: '.green +  key.originalFilename +' created');
			    		com.push({file:path + key.originalFilename });
			    		commandC = commandC  +path + key.originalFilename +' ';
			    		commandCPP = commandCPP  +path + key.originalFilename +' ';
			    		if(com.length >= code.length){
			    			
			    			commandCPP = commandCPP + '-o '+ path + filename+'.exe' ;
			    			commandC = commandC + '-o '+ path + filename+'.exe' ;
			    			if(envData.OS === 'windows' || envData.cmd ==='g++')
			    		    {	    	    
			    				
			    				exec(commandCPP , function ( error , stdout , stderr ){  
			    					if(error)
			    					{
			    						if(exports.stats)
			    						{
			    							console.log(error);
			    						}
			    						var out = { error : stderr };
			    						fn(out);
			    					}
			    					else{
			    						if(input){
			    							var inputfile = filename + 'input.txt';

			    							fs.writeFile( path  +  inputfile , input  , function(err ){
			    								if(exports.stats)
			    								{
			    									if(err)
			    										console.log('ERROR: '.red + err);
			    				    				else
			    				    					console.log('INFO: '.green + inputfile +' (inputfile) created');
			    				    			}
			    				            });
			    							var tempcommand = "cd temp & "+ filename ;
			    							exec( tempcommand+ '<' + inputfile, function ( error , stdout , stderr ){
			    								if(error)
			    								{	
			    									if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
			    									{
			    											var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
			    											fn(out);
			    									}
			    									else
			    									{
			    										if(exports.stats)
			    										{
			    											console.log('INFO: '.green + filename + '.cpp contained an error while executing');
			    										}
			    										var out = { error : stderr };
			    										fn(out);
			    									}													
			    								}
			    								else
			    								{
			    									if(exports.stats)
			    									{
			    										console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
			    									}
			    									var out = { output : stdout};
			    									fn(out);
			    								}
			    							});
			    						}
			    						else //input not provided 
			    						{
			    							if(exports.stats)
			    							{
			    								console.log('INFO: '.green + 'Input mission for '+filename +'.cpp');
			    							}
			    						    var out = { error : 'Input Missing' };
			    							fn(out);
			    						}
			    						
			    					}
			    				});
			    		    }
			    			else{
			    				exec(commandC , function ( error , stdout , stderr ){  
			    					if(error)
			    					{
			    						if(exports.stats)
			    						{
			    							console.log(error);
			    						}
			    						var out = { error : stderr };
			    						fn(out);
			    					}
			    					else{
			    						if(input){
			    							var inputfile = filename + 'input.txt';

			    							fs.writeFile( path  +  inputfile , input  , function(err ){
			    								if(exports.stats)
			    								{
			    									if(err)
			    										console.log('ERROR: '.red + err);
			    				    				else
			    				    					console.log('INFO: '.green + inputfile +' (inputfile) created');
			    				    			}
			    				            });
			    							
			    							exec(path + filename +'.out' + ' < ' + path + inputfile, function ( error , stdout , stderr ){
			    								if(error)
			    								{	
			    									if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
			    									{
			    											var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
			    											fn(out);
			    									}
			    									else
			    									{
			    										if(exports.stats)
			    										{
			    											console.log('INFO: '.green + filename + '.cpp contained an error while executing');
			    										}
			    										var out = { error : stderr };
			    										fn(out);
			    									}													
			    								}
			    								else
			    								{
			    									if(exports.stats)
			    									{
			    										console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
			    									}
			    									var out = { output : stdout};
			    									fn(out);
			    								}
			    							});
			    						}
			    						else //input not provided 
			    						{
			    							if(exports.stats)
			    							{
			    								console.log('INFO: '.green + 'Input mission for '+filename +'.cpp');
			    							}
			    						    var out = { error : 'Input Missing' };
			    							fn(out);
			    						}
			    						
			    					}
			    				});
			    			}
			    		}
					}
			    }	
			});
		});
	});
	
}


exports.compileMultiFileCPP = function ( envData , code ,  fn ) { 
	var com = [];
	commandCPP = 'g++ ';
	commandC = 'gcc ';
	path = './temp/';
	code.forEach(function(key) {
		fs.readFile(key.path, 'utf8',function(err, keyfileData) {
			var filename = cuid.slug();
			console.log(keyfileData);
			fs.writeFile( path  +  key.originalFilename , keyfileData  , function(err ){
		 		if(exports.stats)
			    {
					if(err)
					console.log('ERROR: '.red + err);
					else{
						console.log('INFO: '.green +  key.originalFilename +' created');
			    		com.push({file:path + key.originalFilename });
			    		commandC = commandC  +path + key.originalFilename +' ';
			    		commandCPP = commandCPP  +path + key.originalFilename +' ';
			    		if(com.length >= code.length){
			    			
			    			commandCPP = commandCPP + '-o '+ path + filename+'.exe' ;
			    			commandC = commandC + '-o '+ path + filename+'.exe' ;
			    			if(envData.OS === 'windows' || envData.cmd ==='g++')
			    		    {	    	    
			    				
			    				exec(commandCPP , function ( error , stdout , stderr ){  
			    					if(error)
			    					{
			    						if(exports.stats)
			    						{
			    							console.log(error);
			    						}
			    						var out = { error : stderr };
			    						fn(out);
			    					}
			    					else{
			    						
			    							var tempcommand = "cd temp & "+ filename ;
			    							exec( tempcommand, function ( error , stdout , stderr ){
			    								if(error)
			    								{	
			    									if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
			    									{
			    											var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
			    											fn(out);
			    									}
			    									else
			    									{
			    										if(exports.stats)
			    										{
			    											console.log('INFO: '.green + filename + '.cpp contained an error while executing');
			    										}
			    										var out = { error : stderr };
			    										fn(out);
			    									}													
			    								}
			    								else
			    								{
			    									if(exports.stats)
			    									{
			    										console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
			    									}
			    									var out = { output : stdout};
			    									fn(out);
			    								}
			    							});
			    						
			    						
			    					}
			    				});
			    		    }
			    			else{
			    				exec(commandC , function ( error , stdout , stderr ){  
			    					if(error)
			    					{
			    						if(exports.stats)
			    						{
			    							console.log(error);
			    						}
			    						var out = { error : stderr };
			    						fn(out);
			    					}
			    					else{
			    									    							
			    							exec(path + filename +'.out', function ( error , stdout , stderr ){
			    								if(error)
			    								{	
			    									if(error.toString().indexOf('Error: stdout maxBuffer exceeded.') != -1)
			    									{
			    											var out = { error : 'Error: stdout maxBuffer exceeded. You might have initialized an infinite loop.' };
			    											fn(out);
			    									}
			    									else
			    									{
			    										if(exports.stats)
			    										{
			    											console.log('INFO: '.green + filename + '.cpp contained an error while executing');
			    										}
			    										var out = { error : stderr };
			    										fn(out);
			    									}													
			    								}
			    								else
			    								{
			    									if(exports.stats)
			    									{
			    										console.log('INFO: '.green + filename + '.cpp successfully compiled and executed !');
			    									}
			    									var out = { output : stdout};
			    									fn(out);
			    								}
			    							});
			    						
			    					}
			    				});
			    			}
			    		}
					}
			    }	
			});
		});
	});
}